#+TITLE: SICP Lecture 1A

** Heron's square root algorithm
  - Take a guess
  - If guess is good enough, return
  - Else improve the guess

#+BEGIN_SRC scheme
(define (root x)
  (define square (lambda (x) (* x x)))
  (define avg (lambda (x y) (/ (+ x y) 2)))
  (define good? (lambda (g) (< (abs (- (square g) x)) 0.001)))
  (define improv (lambda (g) (avg g (/ x g))))
  (define try (lambda (g) (if (good? g) g (try (improv g)))))
  (try 1))
  
(root 12)
(exact->inexact (root 12))
#+END_SRC

#+RESULTS:
: 3.4641016533503

* Quotes from the book
** Programming in LISP
   The most significant of these features is the fact that
   Lisp descriptions of processes, called procedures, can
   themselves be represented and manipulated as Lisp data.
   The importance of this is that there are powerful
   program-design techniques that rely on the ability to blur
   the traditional distinction between ``passive'' data and
   ``active'' processes. As we shall discover, one of the
   Lisp's flexibility in handling procedures as data makes it
   most convenient languages in existence for exploring these
   techniques. The ability to represent procedures as data also
   makes Lisp an excellent language for writing programs that
   must manipulate other programs as data, such as the
   interpreters and compilers that support computer languages.
   Above and beyond these considerations, programming in Lisp
   is great fun.

